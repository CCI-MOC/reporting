---
apiVersion: v1
kind: Template
metadata:
  name: reporting_templates_get-info
labels:
  template: "reporting_templates_get-info"
objects:
  - apiVersion: batch/v1beta1
    kind: CronJob
    metadata:
      name: get-info
    spec:
      schedule: "*/15 * * * *"
      concurrencyPolicy: Forbid
      jobTemplate:
        spec:
          activeDeadlineSeconds: 750
          template:
            metadata:
              name: get-info
            spec:
              initContainers:
                - name: check-db-conn
                  image: postgres:latest
                  env:
                    - name: PGHOST
                      value: ${POSTGRES_HOST}
                    - name: PGDATABASE
                      valueFrom:
                        secretKeyRef:
                          name: ${POSTGRES_SECRETS}
                          key: ${POSTGRES_SECRETS_DBNAME_FIELD}
                    - name: PGUSER
                      valueFrom:
                        secretKeyRef:
                          name: ${POSTGRES_SECRETS}
                          key: ${POSTGRES_SECRETS_USER_FIELD}
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${POSTGRES_SECRETS}
                          key: ${POSTGRES_SECRETS_PASSWORD_FIELD}
                  command: ['psql', '-c', '\q']
              containers:
                - name: get-info
                  image: >-
                    docker-registry.default.svc:5000/reporting-test/get_info:latest
                  env:
                    - name: CREDS_FILE
                      value: ${CONFIG_DIR}${CONFIG_FILE}
                    - name: PGHOST
                      value: ${POSTGRES_HOST}
                    - name: PGDATABASE
                      valueFrom:
                        secretKeyRef:
                          name: ${POSTGRES_SECRETS}
                          key: ${POSTGRES_SECRETS_DBNAME_FIELD}
                    - name: PGUSER
                      valueFrom:
                        secretKeyRef:
                          name: ${POSTGRES_SECRETS}
                          key: ${POSTGRES_SECRETS_USER_FIELD}
                    - name: PGPASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${POSTGRES_SECRETS}
                          key: ${POSTGRES_SECRETS_PASSWORD_FIELD}
                    - name: OSUSER
                      valueFrom:
                        secretKeyRef:
                          name: ${OPENSHIFT_SECRETS}
                          key: ${OPENSHIFT_SECRETS_USER_FIELD}
                    - name: OSPASS
                      valueFrom:
                        secretKeyRef:
                          name: ${OPENSHIFT_SECRETS}
                          key: ${OPENSHIFT_SECRETS_PASSWORD_FIELD}
                    - name: ZBXUSER
                      valueFrom:
                        secretKeyRef:
                          name: ${ZABBIX_SECRETS}
                          key: ${ZABBIX_SECRETS_USER_FIELD}
                    - name: ZBXPASS
                      valueFrom:
                        secretKeyRef:
                          name: ${ZABBIX_SECRETS}
                          key: ${ZABBIX_SECRETS_PASSWORD_FIELD}
                  volumeMounts:
                    - name: billing-config
                      readOnly: true
                      mountPath: ${CONFIG_DIR}
              volumes:
                - name: billing-config
                  configMap:
                    name: billing
                    optional: false
                    items:
                      - key: config
                        path: ${CONFIG_FILE}
              restartPolicy: Never
parameters:
  - name: POSTGRES_HOST
    description: "Hostname of the postgres instance to connect to"
    from: "[A-Za-z0-9-]{1,63}"
    generate: "expression"
  - name: POSTGRES_SECRETS
    description: "Name of the secrets object containing postgres secrets"
    value: "postgresql"
  - name: POSTGRES_SECRETS_DBNAME_FIELD
    description: "Field in the postgres secrets object to get the database name"
    value: "database-name"
  - name: POSTGRES_SECRETS_USER_FIELD
    description: "Field in the postgres secrets object to get the username"
    value: "database-user"
  - name: POSTGRES_SECRETS_PASSWORD_FIELD
    description: "Field in the postgres secrets object to get the password"
    value: "database-password"
  - name: OPENSHIFT_SECRETS
    description: "Name of the secrets objects containing Openshift secrets"
    value: "creds-kaizen"
  - name: OPENSHIFT_SECRETS_USER_FIELD
    description: "Field in the openshift secrets object to get the username"
    value: "username"
  - name: OPENSHIFT_SECRETS_PASSWORD_FIELD
    description: "Field in the openshift secrets object to get the password"
    value: "password"
  - name: ZABBIX_SECRETS
    description: "Name of the secrets objects containing Openshift secrets"
    value: "creds-zabbix"
  - name: ZABBIX_SECRETS_USER_FIELD
    description: "Field in the zabbix secrets object to get the username"
    value: "username"
  - name: ZABBIX_SECRETS_PASSWORD_FIELD
    description: "Field in the zabbix secrets object to get the password"
    value: "password"
  - name: CONFIG_DIR
    description: "Path inside container for config object(s) to be placed"
    value: "/etc/billing/"
  - name: CONFIG_FILE
    description: "Path inside container for config object to be placed"
    value: "creds.json"
